#!/bin/bash

if [ -n "$SAML_AA_DEBUG" ]
then
    OUTPUT=/dev/stdout
else
    OUTPUT=/dev/null
fi

# Configuration details that may be injected through environment
# variables or the contents of files.

injectable_config_vars=( 
    SAML_AA_ENTITY_ID
    SAML_AA_SCOPE
)

# If the file associated with a configuration variable is present then 
# read the value from it into the appropriate variable. So for example
# if the variable SAML_AA_ENTITY_ID_FILE exists and its
# value points to a file on the file system then read the contents
# of that file into the variable SAML_AA_ENTITY_ID.

for config_var in "${injectable_config_vars[@]}"
do
    eval file_name=\$"${config_var}_FILE";

    if [ -e "$file_name" ]; then
        declare "${config_var}"=`cat $file_name`
    fi
done

# Inject the entityID.
sed -i -e s@%%SAML_AA_ENTITY_ID%%@"${SAML_AA_ENTITY_ID:-https://idp.example.org/idp/shibboleth}"@ /opt/shibboleth-idp/conf/idp.properties

# Inject the scope.
sed -i -e s@%%SAML_AA_SCOPE%%@"${SAML_AA_SCOPE:-example.org}"@ /opt/shibboleth-idp/conf/idp.properties

# Copy the SAML signing certificate and key into place.
if [ -n "${SAML_AA_SIGNING_CERT_FILE}" ]; then
    cp ${SAML_AA_SIGNING_CERT_FILE} /opt/shibboleth-idp/credentials/idp-signing.crt
    chmod 644 /opt/shibboleth-idp/credentials/idp-signing.crt
    chown jetty:jetty /opt/shibboleth-idp/credentials/idp-signing.crt
fi

if [ -n "${SAML_AA_SIGNING_PRIVKEY_FILE}" ]; then
    cp ${SAML_AA_SIGNING_PRIVKEY_FILE} /opt/shibboleth-idp/credentials/idp-signing.key
    chmod 600 /opt/shibboleth-idp/credentials/idp-signing.key
    chown jetty:jetty /opt/shibboleth-idp/credentials/idp-signing.key
fi


exec /docker-entrypoint.sh "$@"
